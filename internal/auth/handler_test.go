package auth

import (
	"context"
	"fmt"
	"net/http"
	"net/http/httptest"
	"net/url"
	"strings"
	"testing"

	respErrors "code-challenge/internal/errors"
	"code-challenge/pkg/log"

	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

func TestHandler_Register(t *testing.T) {
	gin.SetMode(gin.TestMode)
	t.Run("Login success", func(t *testing.T) {
		mockService := new(MockService)
		logger := log.New()
		ctx := context.Background()
		expectedToken := "test_token"
		handler := NewHandler(mockService, logger)
		r := SetUpRouter()
		r.POST("/login", handler.Login)

		mockService.On("Authenticate", ctx, mock.Anything, mock.Anything).Return(expectedToken, nil)
		form := url.Values{}
		form.Add("username", "test")
		form.Add("password", "123")

		request, _ := http.NewRequest(http.MethodPost, "/login", strings.NewReader(form.Encode()))
		request.Header.Set("Content-Type", "application/x-www-form-urlencoded")

		w := httptest.NewRecorder()
		r.ServeHTTP(w, request)

		assert.Equal(t, 200, w.Code)
		cookie := w.Result().Cookies()[0]
		assert.Equalf(t, expectedToken, cookie.Value, "expected token %s, got %s", expectedToken, cookie.Value)

		mockService.AssertExpectations(t)
	})

	t.Run("Login fails, empty username/password", func(t *testing.T) {
		mockService := new(MockService)
		logger := log.New()
		handler := NewHandler(mockService, logger)
		r := SetUpRouter()
		r.POST("/login", handler.Login)

		form := url.Values{}
		form.Add("username", "")
		form.Add("password", "")

		request, _ := http.NewRequest(http.MethodPost, "/login", strings.NewReader(form.Encode()))
		request.Header.Set("Content-Type", "application/x-www-form-urlencoded")

		w := httptest.NewRecorder()
		r.ServeHTTP(w, request)

		assert.Equal(t, 400, w.Code)

		mockService.AssertExpectations(t)
	})

	t.Run("Login fails, internal error from service", func(t *testing.T) {
		mockService := new(MockService)
		logger := log.New()
		ctx := context.Background()
		handler := NewHandler(mockService, logger)
		r := SetUpRouter()
		r.POST("/login", handler.Login)

		mockService.On("Authenticate", ctx, mock.Anything, mock.Anything).Return("", fmt.Errorf("mock error"))
		form := url.Values{}
		form.Add("username", "test")
		form.Add("password", "123")

		request, _ := http.NewRequest(http.MethodPost, "/login", strings.NewReader(form.Encode()))
		request.Header.Set("Content-Type", "application/x-www-form-urlencoded")

		w := httptest.NewRecorder()
		r.ServeHTTP(w, request)

		assert.Equal(t, 500, w.Code)
		mockService.AssertExpectations(t)
	})

	t.Run("Login fails, incorrect username/password", func(t *testing.T) {
		mockService := new(MockService)
		logger := log.New()
		ctx := context.Background()
		handler := NewHandler(mockService, logger)
		r := SetUpRouter()
		r.POST("/login", handler.Login)

		mockService.On("Authenticate", ctx, mock.Anything, mock.Anything).Return("", respErrors.BadRequest("incorrect username/password"))
		form := url.Values{}
		form.Add("username", "test")
		form.Add("password", "123")

		request, _ := http.NewRequest(http.MethodPost, "/login", strings.NewReader(form.Encode()))
		request.Header.Set("Content-Type", "application/x-www-form-urlencoded")

		w := httptest.NewRecorder()
		r.ServeHTTP(w, request)

		assert.Equal(t, 400, w.Code)

		mockService.AssertExpectations(t)
	})
}

func SetUpRouter() *gin.Engine {
	router := gin.Default()
	return router
}

// MockService is an autogenerated mock type for the service type
type MockService struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: ctx, username, password
func (_m *MockService) Authenticate(ctx context.Context, username string, password string) (string, error) {
	ret := _m.Called(ctx, username, password)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
